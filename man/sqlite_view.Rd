% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/neurojam-sqlite.R
\name{sqlite_view}
\alias{sqlite_view}
\title{Summarize a SQLite database view}
\usage{
sqlite_view(con, x, type = c("full", "desc_df", "desc_df_tbl"), ...)
}
\arguments{
\item{con}{SQLite database connection, compatible with \code{DBI}.}

\item{x}{character name of a SQLite database view. For a list
of database views, query the \code{sqlite_master} table, for
example:
\code{DBI::dbGetQuery(con, "SELECT name, type FROM sqlite_master WHERE type='view'")}}

\item{type}{character value indicating the type of output to
return, as described above.}

\item{...}{additional arguments are ignored.}
}
\value{
\code{data.frame} with content dependent upon \code{type} argument.
}
\description{
Summarize a SQLite database view
}
\details{
This function is specific to SQLite database views, and
is intended to return deeper information about the view and
the underlying tables refereced. It will indicate the tables
or views referenced for each field, and will indicate whether
each field is associated with a database index.

There are numerous allowed methods to create a view, and
this function tolerates many but definitely not all possible
styles.

This function parses the SQL used to create the database view,
which is expected to have the format:

\code{"SELECT ta.field1, tb.field2 FROM table_a ta, table_b tb WHERE ta.field1 = tb.field1"}

The SELECT columns can be aliased, and can contain some math or
other syntax that combines multiple fields, within some limits
(see examples below).

\code{"SELECT ta.field1 as alias1, tb.field2 as alias2 FROM table_a ta, table_b tb WHERE ta.field1 = tb.field1"}

Some comments about recognized examples:
\itemize{
\item All database tables in the FROM clause must be aliased,
for example:
\code{"SELECT fc.* FROM file_channel fc"} uses the alias \code{"fc"}
to refer to the table \code{"file_channel"}.
\item A database view in the FROM clause must also be aliases,
for example:
\code{"SELECT fv.* FROM fc_view fv"} uses the alias \code{"fv"}
to refer to the database view \code{"fc_view"}.
\item All fields in the SELECT clause must use the table alias prefix,
for example:
\code{"SELECT fc.filename, fc.channel FROM file_channel fc"} uses the
table alias prefix \code{"fc."}, which refers to table \code{"file_channel"}.
\item When a SELECT field references more than one table field,
each table field is parsed, but only the first field is
tested for corresponding column index. For example:
\code{"SELECT fc.time * fc.time_step as minutes FROM file_channel fc"}
refers to two fields \code{"fc.time"} and \code{"fc.time_step"}, and
assigns an alias \code{"minutes"}. In the output, the field name
is \code{"minutes"} and the first referenced column is \code{"fc.time"}.
Only \code{"fc.time"} will be tested for existence of a column index,
in the table \code{"file_channel"}.
\item Within some reason, math is parsed to remove non-database
columns, for example \code{"fc.time_step*fc.nrow/60 as minutes"}
is recognized with fields \code{"fc.time", "fc.nrow"} and the alias
name \code{"minutes"}.
\item A column index is only tested in the table referenced in the
table alias of the SELECT clause, even when the field is involved
in a JOIN with another table. The second table is not tested
for an index. (This might need to change in future.)
\item Note that column index is represented from the source table,
even when the current database view references another
database view.
}

Output is one of three formats:
\enumerate{
\item When \code{type = "full"} a wide \code{data.frame} is returned, which
includes all associated fields in the SELECT clause, all
database tables and columns referenced in each field, the
name of the referenced table or view, and indication whether
the source table contains an index.
\item When \code{type = "desc_df"} the output is equivalent to that
returned by \code{sqlite_desc()}, which only indicates the actual
field names in the database view, and whether the source table
column is indexed. It therefore does not indicate the source
table column name, which is otherwise hidden.
\item When \code{type = "desc_df_tbl"} the output is similar to \code{"desc_df"}
except that the source table and table column values are returned,
in order to assist finding the location of the source table for
each field.
}
}
\examples{
db <- DBI::dbConnect(RSQLite::SQLite(), ":memory:");
DBI::dbCreateTable(db, "forecasts", data.frame(id=1:3, temperature=20:22));
DBI::dbGetQuery(db, "CREATE INDEX id_forecast_idx on forecasts(id)");

# create second table
DBI::dbCreateTable(db, "feels", data.frame(temperature=20:22, feels=c("cold","warm","hot")));

# create a view that joins these two tables
DBI::dbGetQuery(db, "CREATE VIEW ff_view as SELECT f.id, f.temperature, fe.feels FROM forecasts f, feels fe WHERE f.temperature = fe.temperature");
sqlite_view(db, "ff_view")

}
\seealso{
Other jam database functions: \code{\link{ephys_short_name}},
  \code{\link{extract_event_data}},
  \code{\link{get_animal_event_data}},
  \code{\link{get_animal_event_derived}},
  \code{\link{get_animal_raw_data}},
  \code{\link{save_animal_event_data}},
  \code{\link{save_animal_event_derived}},
  \code{\link{save_animal_raw_data}},
  \code{\link{sqlite_desc}}, \code{\link{sqlite_indices}}
}
\concept{jam database functions}
