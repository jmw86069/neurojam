% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/neurojam-sqlite.R
\name{sqlite_desc}
\alias{sqlite_desc}
\title{SQLite table description}
\usage{
sqlite_desc(con, x, cat_text = TRUE, method = c("df", "sql"), ...)
}
\arguments{
\item{con}{valid SQLite database connection}

\item{x}{character vector}

\item{cat_text}{logical indicating whether to cat the text
output, or when \code{cat_text=FALSE} the SQL lines are returned as
a character vector.
@param method character value, where \code{"df"} returns \code{data.frame},
along with column types derived from content in each field,
and column index information; or
and \code{"sql"} which returns the SQL definition used to create
the table or view, but does not include more information
about whether each column is indexed.}

\item{...}{additional arguments are ignored.}
}
\value{
when method is \code{"df"} the output is a \code{data.frame} with
\code{"column"}, \code{"type"}, and \code{"index"} columns. The \code{"index"}
column is logical, indicating whether each column has
a corresponding index.
}
\description{
SQLite table description
}
\details{
This function returns a description of a SQLite table
using data stored in the \code{sqlite_master} reference database
table. When the table is actually a database view, it
calls \code{sqlite_view()} and returns the corresponding
information based upon the view, which includes traversing
columns to the source table to find out if each column
is indexed.
}
\examples{
db <- DBI::dbConnect(RSQLite::SQLite(), ":memory:");
DBI::dbCreateTable(db, "forecasts", data.frame(id=1:3, temperature=20:22));
DBI::dbGetQuery(db, "CREATE INDEX id_forecast_idx on forecasts(id)");
sqlite_desc(db, "forecasts")

# create second table
DBI::dbCreateTable(db, "feels", data.frame(temperature=20:22, feels=c("cold","warm","hot")));

# create a view that joins these two tables
DBI::dbGetQuery(db, "CREATE VIEW ff_view as SELECT f.id, f.temperature, fe.feels FROM forecasts f, feels fe WHERE f.temperature = fe.temperature");
sqlite_desc(db, "ff_view")

}
\seealso{
Other jam database functions: \code{\link{ephys_short_name}},
  \code{\link{extract_event_data}},
  \code{\link{get_animal_event_data}},
  \code{\link{get_animal_event_derived}},
  \code{\link{get_animal_raw_data}},
  \code{\link{save_animal_event_data}},
  \code{\link{save_animal_event_derived}},
  \code{\link{save_animal_raw_data}},
  \code{\link{sqlite_indices}}, \code{\link{sqlite_view}}
}
\concept{jam database functions}
