% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/neurojam-binwavelets.R
\name{bin_biwavelets}
\alias{bin_biwavelets}
\title{Binned biwavelet signal processing}
\usage{
bin_biwavelets(x, dt = NULL, max_duration_sec = 30, buffer_sec = 2,
  dj = 1/16, s0 = 0.005, J1 = 240, max.scale = 163,
  new_step = 0.1, min_fraction = 0.4, return_type = c("matrix",
  "trimmed_list", "untrimmed_list"), dryrun = FALSE, verbose = FALSE,
  ...)
}
\arguments{
\item{x}{numeric vector or matrix representing the source signal.}

\item{dt}{numeric value indicating the delta-time, or the time step
between each signal measurement, typically in units of seconds.
When \code{dt} is \code{NULL}, the attribute \code{"time_step"} is used, if
present.}

\item{max_duration_sec}{the maximum time duration in seconds for
each time bin. Note that the number of values in \code{x} used is
dependent upon the \code{dt} time step, however since the purpose
is to produce a frequency-time matrix, the time duration should
be appropriate for the intended output frequency range.}

\item{buffer_sec}{the time buffer ussed to extend each time bin,
in units of seconds. This buffer should exceed the uncertainty
region for the range of output frequencies.}

\item{dj, s0, J1, max.scale}{numeric arguments passed to
\code{biwavelet::wt()}.}

\item{new_step}{numeric value indicating the output time step,
in units of seconds. The default \code{0.1} will output one column
per 0.1 second. Note: the \code{new_step} value should ideally be
in multiples of \code{dt} time step, in order to produce integer
boundaries.}

\item{min_fraction}{numeric value between 0 and 1, indicating
the required fraction of \code{new_step} required for the last
bin of processing, below which those rows are dropped. For
example, when \code{new_step=1} for 1 second, but there is less
than 0.4 seconds data in the last 1-second interval.}

\item{return_type}{character value indicating the output type:
\code{"matrix"} returns one matrix after individual matrices have
been trimmed and combined; \code{"trimmed_list"} returns the list
of matrices after the extended time bins were trimmed;
\code{"untrimmed_list"} returns the list of matrices before trimming
has occurred, along with \code{attr(x, "trim")} which contains the
range to use for trimming.}

\item{dryrun}{logical indicating whether to run in "dryrun" mode,
where \code{dryrun=TRUE} will print debugging info but not run the
biwavelet processing.}

\item{verbose}{logical indicating whether to print verbose output.}

\item{...}{additional arguments are passed to
\code{calculate_wavelet_matrix()}}
}
\description{
Binned biwavelet signal processing
}
\details{
This function attempts to sidestep memory limitations when
processing very large time series data using a biwavelet
transform. Typically the biwavelet transform \code{biwavelet::wt()}
returns the same number of columns as the rows of input
signal, which can be orders of magnitude larger than is
practically useful, while requiring huge amounts of memory.

This function is also just a wrapper to \code{calculate_wavelet_matrix()},
only processing subsets of input signal when necessary.
It may in future become an optional component of
\code{calculate_wavelet_matrix()}, used when the input signal
exceeds the \code{max_duration} threshold.

The function implements the following workflow:
\itemize{
\item Define partially overlapping time bins for the input signal.
\item Perform biwavelet transform on each bin.
\item Trim the extended region from the frequency-time matrix.
\item Condense the frequency-time matrix to save memory.
\item Combine the list of frequency-time matrices to create one
continuous frequency-time matrix.
}

The signal binning strategy is intended to avoid edge artifacts,
by extending signal for each bin into the next region.
Each time bin should end slightly beyond the start of the next bin,
and the start of each next bin should extend slightly before
the end of the previous bin. The resulting frequency-time
matrix is trimmed to remove the extended time, in order
to produce a continuous matrix with no edge artifacts.
}
